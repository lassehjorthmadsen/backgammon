---
title: "Explore EMG Normalization"
author: "Lasse Hjorth Madsen"
date: today 
format: html
toc: true
editor: visual
---

```{r}
#| echo: false
#| warning: false

library(tidyverse)
source("../R/functions.R")

met <- get_met(filename = "..\\data-raw\\Kazaross XG2.met")
pwin3 <- 5/6*1/6*5/6 + 5/6*5/6*5/6*1/6
theme_set(theme_minimal())
```

## Why This?

This note explores how eXtreme Gammon normalizes mwc, *Match Winning Chances*, to emg, *Equivalent to Money Game*, a metric that is (supposedly) comparable to money game equities.

## Introduction

In backgammon money games mistakes are usually evaluated in terms of equities, $E$, or *expected value*. $E=0$ means that the game is even. Equities are typically *normalized* so the level of the cube and the stakes are *not* reflected in the size of mistakes: $E=0.1$ means that the expected value of a position is one tenth of the cube value. If you made a $0.05$ error, your position's expected value just dropped by five percent of the cube value.

In match play, the natural unit of measurement is match winning chances, mwc. For example, trailing 3-away, 2-away, sometimes written as (-3,-2), yields $mwc=0.40$, assuming strong, equal players. (Unless otherwise noted, all mentioned equities are from the Kazaross XG2 match equity table, used as default by eXtreme Gammon.)

The $mwc$ at stake varies by score. At double match point, a one point gain is worth $0.5\ mwc$, the difference between an even game, $mwc=0.50$ and a sure victory, $mwc=1.00$. At the beginning of a 17-point match one point is worth only about $0.04\ mwc$.

In a sense, double match point is like playing for 10\$ per point, compared to 0.8\$ per point at the beginning of the match.

Also, the value of one point is different for the leader and the trailer; at (-3,-2) one point is worth $0.10\ mwc$ for the trailer but $0.15\ mwc$ for the leader.

## EMG normalization

As mentioned, in money game we often like to compare errors without considering the level of the cube and the stakes. We rarely say things like "Taking that three-roll position cost me about 4.5\$ because the cube was at 4 and we played for 10\$ per point." It is more common to say that the take is a 0.15 error.

Likewise, it can be useful to normalize match play errors, so that we can compare them to money game, and so we can compare errors across scores. If some error loses $0.03\ mwc$ at (-4, -5), but only $0.01\ mwc$ at (-17, -10) is that because the first score is closer to the end of the match, where points are more valuable, or are there something else about the two scores that are different? And how big would the same mistake have been in a money game?

This is where emg (Equivalent to Money Game) comes in. The idea is to scale the difference between losing a single point and winning a single point to the interval $[-1;+1]$ that we use in money game.

For example, at (-3,-7) the leader has $mwc$ of about $0.76$. If he loses one point and gets to (-3,-6) that drops to $0.71$. If he wins one point for (-2,-7) that rises to $0.84$. The range is $[0.71;0.84]$, and the difference between winning and losing a single point is $0.84-0.71 = `r 0.84-0.71`$. We can scale any $mwc$ value to the corresponding money interval $[-1;+1]$ like this:

$$emg =\frac{mwc-0.71}{0.13}\times{2}-1$$

So the $emg$ for our minimal value of $mwc=0.71$ becomes:

$$emg =\frac{0.71-0.71}{0.13}\times{2}-1=-1$$

And for our maximum value of $mwc=0.84$ we get:

$$emg =\frac{0.84-0.71}{0.13}\times{2}-1=+1$$
More generally, if $mwc_{min}$ is the match winning chance a player has after losing the cube value, and $mwc_{max}$ is the corresponding chance after winning the cube value, then we can calculate $emg$ from any $mwc$ at any score like this:

$$emg =\frac{mwc-mwc_{min}}{mwc_{max}-mwc_{min}}\times{2}-1$$

So if we lead (-3,-7) and mess up the opening roll so our $mwc$ drops from $0.76$ to $0.75$, then the size of the error in $emg$ would be:

$$emg =\frac{0.75-0.71}{0.13}\times{2}-1=`r round((0.75-0.71)/(0.84-0.71)*2-1, 2)`$$

This also means that the leader's $emg$ at the beginning of the game is negative:

$$emg =\frac{0.76-0.71}{0.13}\times{2}-1=`r round((0.76-0.71)/(0.84-0.71)*2-1, 2)`$$

That seems a little funny. The reason is, that in some sense the leader is closer to losing the game that to winning, since the gain by winning is much bigger than the loss from losing. The leader is not in the middle, but closer to the lower end of the interval $[-1;1]$. 

This is just one counter-intuitive thing about emg normalization; there are more to come.

## The problem

Sometimes, the $emg$ appears really broken. Take a pure three-roll position where the non-roller has winning probability, $P(w)$ of:

$$
P(w) = \frac{5}{6}\times\frac{1}{6}\times\frac{5}{6}\ + \ \frac{5}{6}\times\frac{5}{6}\times\frac{5}{6}\times\frac{1}{6} = `r round(pwin3, 3)`
$$ Consider two cases of such a position:

a.  You're being doubled trailing (-3,-2)
b.  You're being redoubled when tied (-3,-3)

In both cases you can take for the match (possibly via an automatic redouble), and get $mwc = `r round(pwin3, 3)`$. Or you can pass and get to (-3,-1) which is $mwc=0.249$ The two cases appear identical. You're better of passing. Taking would cost $0.249-0.212 = 0.037\ mwc$ in both situations.

But plucking the two cases into our $emg$ formula we get:

a.  $emg =\frac{0.21219-0.24924}{0.5-0.24924}\times{2}-1=`r round(emg(0.21219,3,2,1,met), 3)`$

b.  $emg =\frac{0.21219-0.24924}{0.75076-0.24924}\times{2}-1=`r round(emg(0.21219,3,3,2,met), 3)`$

So at (-3,-2) the mistake of taking comes to a $`r round(emg(0.21219, 3, 2, 1, met) + 1, 3)`\  emg$ error; at (-3,-3) what appears to be an identical error comes to a $`r round(emg(0.21219, 3, 3, 2, met) + 1, 3)`\  emg$ error.

You can set up a pure three-roll position in XG and confirm there are indeed the reported emg errors when accepting a (re-)double at those two scores. 

Jeremy Bagai pointed out the same issue with a detailed analysis [here](http://www.fortuitouspress.com/emg).

What's going on?

Inspecting the emg formula, it isn't that hard to figure out: The $0.037\ mwc$ error just looks smaller when you put in the wide interval between losing and winning you get at (-3,-3) with cube at 2, compared to the more narrow interval at (-3,-2), cube at 1. As noted, the mwc interval in the two cases are $[0.25;0.50]$ and $[0.25;0.75]$ respectively.

It is counter intuitive, however, and you wonder if emg fails after all to be useful for comparing errors across scores, and between match play and money games.

We can note, like Bagai did in the paper linked above, that a similar observation can be made when you are being doubled to 8 (in the same three-roll position) at (-3,-5). You can again choose between trailing (-3,-1) with $0.249\ mwc$ or playing for the match with $0.212\ mwc$, which would be a $0.037\ mwc$ error. This time the interval is even wider, so the emg normalized error comes to $`r round(emg(0.21219,3,5,4,met)+1,3)`$. Feel free to check with XG.

## Mores scores, same three-roll position

Let's look at more scores, to get a feel for how the emg normalization in general compares to raw mwc. 

The money benchmark is the error of accepting a three-roll position which is easy to calculate, since for money there can't be any proper recubes. The three-roll position has an expected money game value, $E$, of
$$
E = 2P(w) - 1 = `r round(2*pwin3 - 1, 3)`
$$
for the non-roller. So after accepting an initial double, the non-roller faces an average loss of $2\times `r round(2*pwin3 - 1, 3)`=`r round(4*pwin3 - 2, 3)`$ and the position is a money pass, since the loss of one point is just $-1$. The size of the take error is $`r round(4*pwin3 - 2, 3) + 1`$ (times the cube, times the stake, if you want the loss in real money).

The chart below shows the size of the error of accepting an initial double in a pure three-roll position, at all pre-crawford scores in a 9-point match. Errors are nomalized to emg, as explained above.

```{r calculate, cache=TRUE}
roll3 <- met %>%
  filter(x > 1, x < 10, y > 1, y < 10) %>% # Perhaps get rid of this filter
  mutate(cube = 1) %>% 
  rowwise() %>%
  mutate(eq_take = if_else(y > 2 * cube,
                           gwc2mwc(pwin3, x, y, 2 * cube, met),
                           gwc2mwc(pwin3, x, y, 4 * cube, met)),
         eq_drop = mwc(x, y - cube, met),
         mwc_diff = eq_take - eq_drop,
         emg_diff = emg(eq_take, x, y, cube, met) + 1) %>% 
  ungroup() %>% 
  mutate(score = paste0("-", x, ",-", y),
         score = fct_reorder(score, mwc_diff)) %>%
  arrange(-mwc_diff)
```

```{r plot}
roll3 %>%
  #filter(x > 1, x < 10, y > 1, y < 10) %>%
  ggplot(aes(y = score, x = mwc_diff, color = mwc_diff > 0)) +
  geom_point(show.legend = F)

```

