---
title: "Match Equity Precison "
author: "Lasse Hjorth Madsen"
date: today 
format: html
toc: true
editor: visual
execute:
  echo: false
  warning: false
---

```{r setup}
library(tidyverse)
devtools::load_all()

theme_set(theme_minimal() +
  theme(legend.position = c(1, 1), legend.justification = c(1, 1), legend.background = element_rect(fill = "white", color = NA)))

met <- get_met(filename = "..\\data-raw\\Kazaross XG2.met")

tp <- met %>% 
  as_tibble() %>% 
  pivot_longer(cols = everything(), names_to = "y", values_to = "mwc") %>% 
  mutate(x = sort(rep(1:25, 25)),
         y = as.integer(y),
         cube = 1) %>%
  select(x, y, mwc, cube) %>%
  expand_grid(., precision = 2:6) %>% 
  rowwise() %>% 
  mutate(`Take point` = tp(x, y, cube, round(met, precision))) %>% 
  ungroup()
```

## Why This?

Match equity calculations in backgammon can be tricky. For a long time, I had the nagging suspicion that maybe those calculations might not be as reliable as we would like to think.

Let's do a couple of simple experiments and try to find out.

## Example

Here's one example that is fairly straight forward. You're in the beginning of a 17-point match, off for a bad start, trailing 0-5 or 17-away, 12-away, or (-17,-12). You're facing a double in a bearoff that you consider a small money pass. Should trailing make you more or less inclined to accept? 

For simplicity let's do the calculations assuming no redoubles, since this is a bearoff with limited recube potential anyway. Using the Kazaross XG2 match equity table, with full six digit precision, the calculation goes like this.

```{r}
pass <- mwc(17, 11, met)
twin <- mwc(15, 12, met)
tlose <- mwc(17, 10, met)
loss <- pass - tlose
gain <- twin - pass
```

- A pass means (-17,-11), $mwc=`r pass`$

- Taking and winning means (-15, -12), $mwc=`r twin`$, for a gain of: $`r twin`-`r pass` = `r gain`$
- Taking and losing means (-17,-10), $mwc=`r tlose`$, for a loss of: $`r pass` - `r tlose` = `r loss`$ 
- $Take\ point = \frac{loss}{loss+gain} = \frac{`r loss`}{`r loss` + `r gain`} = `r loss/(loss + gain)`$ 

Your take point is a bit *higher* that for money, you should be *less* inclined to take; so you probably have a *pass* if this is borderline for money.

But of course, nobody can do calculations like this with six digits over the board. If you're a really good tournament player, you might attempt doing the same calculations rounded to two digits (whole percentages).

Let's see how that would play out:

```{r}
pass <- round(pass, 2)
twin <- round(twin, 2)
tlose <- round(tlose, 2)
loss <- pass - tlose
gain <- twin - pass
```

- A pass means (-17,-11), $mwc=`r pass`$

- Taking and winning means (-15, -12), $mwc=`r twin`$, for a gain of: $`r twin`-`r pass` = `r gain`$
- Taking and losing means (-17,-10), $mwc=`r tlose`$, for a loss of: $`r pass` - `r tlose` = `r loss`$ 
- $Take\ point = \frac{loss}{loss+gain} = \frac{`r loss`}{`r loss` + `r gain`} = `r loss/(loss + gain)`$ 

Now, you reach the opposite conclusion: Your take point is considerably *lower* than the well-known $0.25$ cubeless take point for money. You might well have a clear *take*. 

Looking at the calculations, we see that the calculations are impacted heavily from a couple of rounding errors: The equity from passing and getting to (-17-11) gets rounded *down*; the equity from taking and winning gets rounded *up* so the total $mwc$ loss from taking (and being wrong) is only about $0.03$, almost a full percentage point lower that the $0.038$ we get using all digits. 

Finally, that lower number goes into both the numerator and the denominator, of the take point calculation, impacting the take point in a big way.

## How common is this?

Did I cherry pick this example? Well, yes, but the cherry wasn't hard to find. Let's look at more examples.

### Simple take points

For starters, here's a plot showing more cubeless, gammonless take points, when the player being doubled is 17-away.

```{r}
tp %>% 
  filter(x %in% c(17), y > 1, precision == 6) %>% 
  ggplot(aes(x = y, y = `Take point`, color = fct_rev(factor(x)), group = x)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 17-away", 
       subtitle = "No cube, no gammons",
       x = "Opponent needs", color = "Player needs") 
```

Some observations:

- Not surprisingly, you have a low take point, around $0.19$, when the opponent needs just two points to win, and you have an automatic redouble available. 
- Same thing when the opponent needs three points and you're kind of desperate.
- You have a much *higher* take point when the opponent needs four, because the extra two point at stake are very valuable for the opponent. 
- The same holds, but to a smaller and smaller degree, when the opponent needs 6, 8 or 10 points to win.

Let's extend the plot to cover more scores:

```{r}
tp %>% 
  filter(x %in% c(2, 3, 4, 17, 25), y > 1, precision == 6) %>% 
  ggplot(aes(x = y, y = `Take point`, color = fct_rev(factor(x)), group = x)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 2-, 3-, 4-, 17-, and 25-away", 
       subtitle = "No cube, no gammons",
       x = "Opponent needs", color = "Player needs") 
```

Some observations:

- In general, for this kind of doubles (initial, cubeless, gammonless) it is *easier*, not harder, to accept a double if you are leading.

- The exception is if the opponent needs only two or three points while having a big lead. Here, you're near dead if you lose anyway, so take points are low.

- The very highest take point we find at (-4,-3): $`r round(tp(4, 3, 1, met), 3)`$ At this score you're often better off passing and getting to the notorious (-4,-2) where you can double very aggresively and try to win the match with a gammon.

### With rounding errors

But the goal was to examine the impact of rounding errors. Let's go back to the 17-away take points from the first diagram, and experiment with the number of digits we use for calculating take points.

```{r}
tp %>% 
  filter(x %in% c(17), y > 3) %>% 
  ggplot(aes(x = y, y = `Take point`, color = factor(precision), group = precision)) +
  scale_x_continuous(breaks = 2:25, minor_breaks = 2:25) +
  scale_y_continuous(breaks = seq(0.15, 0.36, 0.01), minor_breaks = NULL) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at 17-away, with rounding errors",
       subtitle = "by opponent's score and number of digits used for match equities",
       x = "Opponent needs", color = "No. of digits") 
```
We see that the 2-digit calculations are often off by a fair amount. The (-17,-12) exampe I mentioned, is not the only one.

Let's extend this again with many small plots for different scores:

```{r}
#| fig-height: 7
 
tp %>% 
  filter(x %in% c(2, 3, 4, 5, 7, 10, 12, 14, 17, 20, 25), 
         y > 3, `Take point` > 0, `Take point` < 0.5) %>%
  mutate(score_label = fct_reorder(paste("Player needs:", x), x)) %>% 
  ggplot(aes(x = y, y = `Take point`, color = factor(precision), group = precision)) +
  facet_wrap(facets = vars(score_label)) +
  geom_point() +
  geom_line() +
  labs(title = "Take points at many scores, with rounding errors",
       subtitle = "by opponent's score and number of digits used for match equities",
       x = "Opponent needs", 
       color = "No. of digits") +
  theme(legend.position = c(1, 0), legend.justification = c(1, 0)) +
  guides(colour = guide_legend(ncol = 2))
```
From the chart is pretty evident that two digit precision just doesn't cut it for calculating these kind of take points: They are all over the place, basically.

```{r}
diffs <- tp %>% 
  filter(x > 1, y > 1, precision %in% c(2,6)) %>% 
  select(x, y, precision, `Take point`) %>% 
  pivot_wider(names_from = precision, values_from = `Take point`) %>% 
  mutate(diff = `2` - `6`)
```

Across all scores, the average absolute difference between take points with two-digit precision and six-digit precision is: `r diffs$diff %>% abs() %>% mean(na.rm = T) %>% round(3)`

The distribution of differences looks like this:

```{r}
diffs %>% 
  filter(!is.na(diff)) %>% 
  ggplot(aes(x = diff)) +
  geom_density() +
  scale_x_continuous(breaks = seq(-0.5, 0.7, 0.1), 
                     minor_breaks = seq(-0.5, 0.7, 0.025)) +
  labs(title = "Distribution of taking point rounding errors",
       subtitle = "All pre-crawford scores in 25-point matches",
       x = "Difference: Two-digit take point - six-digit take point",
       y = "Density")
```
We see that is is very common for the two-digit take point to be off by a couple of percentage points; sometimes as much as five percentage points.

## Conclusion
