---
title: "Reproduce example in GNUBG Docs"
author: "Lasse Hjorth Madsen"
format:
  html:
    code-fold: true
    df-print: kable
execute: 
  warning: false
---

```{r}
library(dplyr)
devtools::load_all()
```


## The example

Let's try to reproduce the "live" take points in the example position in the GNU Backgammon [manual](https://www.gnu.org/software/gnubg/manual/gnubg.pdf), section 10.4.5.2 Live cube equities.

```{r}
woo <- get_met("../data-raw/Woolsey.met")
kaz <- get_met("../data-raw/Kazaross XG2.met")

probs <- c(0.454, 0.103, 0.001, 0.546, 0.106, 0.003)
names(probs) <- c("Win", "Win G", "Win BG", "Lose", "Lose G", "Lose BG")

gfw = 106/546; bgfw = 0 # 3/545
gfb = 103/454; bgfb = 0 # 1/454

# This means that White, our opponent, wins game with prob 0.546
# White's gammon rate, gfw, is 106/546
# White leads (-4,-7) in match
```

In this opening position, we're Black, trailing (-7,-4), against White. We're small underdogs to win, but our gammon frequency is also a bit higher that our opponent's. The cubeless distribution of outcomes are as follows:


```{r}
probs
```

The cubeless take points I calculate are as follows:

```{r}
df <- tibble(`Cube value` = c(4, 2, 1),
             `TP for Black (-7,-4)` = c(
               tp_gammons(7, 4, gfb, bgfb, gfw, bgfw, 4, woo),
               tp_gammons(7, 4, gfb, bgfb, gfw, bgfw, 2, woo),
               tp_gammons(7, 4, gfb, bgfb, gfw, bgfw, 1, woo)),
             `TP for White (-4,-7)` = c(
               tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 4, woo),
               tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 2, woo),
               tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 1, woo))
             )

df
```


```{r}
high_tp <- tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 2, woo)
```

The level-1 cube take points don't match the table in the manual, since that are "live" take points. The level-2 and level-4 doubles all result in a dead cube, so they should match -- and they do. 

Let's try to do a live cube take point, and fix the grossly underestimated take point for Black at `(-7,-4)`:

```{r}
tp_live <- 
tp_gammons(7, 4, gfb, bgfb, gfw, bgfw, 1, woo) * (1 - tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 2, woo))

tp_live
```
For some reason, it doesn't match the 24.5% figure in the table. The reason it *should* work, is that Black, trailing, has a juicy potential recube if accepting the initial double. As we have seen, White's take point when doubled to 4, is `r high_tp` so Black need only get to `r 1 - high_tp` game winning chances to double White out. If he has `r tp_live` game winning chances, then the chance that he gets to double before he loses, is:

$$p(E) = \frac{`r tp_live`}{`r tp_live` + `r 1-high_tp-tp_live`} = `r tp_live/(tp_live + 1 - high_tp - tp_live)`$$

How about the White level-1 TP?

```{r}
tp_live2 <- 
tp_gammons(4, 7, gfw, bgfw, gfb, bgfb, 1, woo) * (1 - tp_gammons(7, 4, gfb, bgfb, gfw, bgfw, 2, woo))

tp_live2
```

Also too low; table says 27.3%

How about a simple example: Same score, no gammons. Trailer's take point:

```{r}
tp_gammons(7,4,0,0,0,0,1,woo)

```

Leader's take point on the recube:

```{r}
tp_gammons(4,7,0,0,0,0,2,woo)
```

Adjusted, live, take point:

```{r}
tp_gammons(7,4,0,0,0,0,1,woo) * (1-tp_gammons(4,7,0,0,0,0,2,woo))
```
These all check out with both GNU BG and XG. I must be applying the live-cube transformation wrongly, but only when gammons are in play. All take-points seem to be fine.

Spot checking, it looks like my calculated cubeless take-points are same as GNU's, although automatic redoubles are considered "Fully live" in GNU. Could this be the source of discrepancy? It doesn't seem like it, since for the offending score, (-4,-7), the recube will be dead afterwards, so it doesn't matter if this is live or not.

Checking some random live-cube TP calculation *without* gammons, we get:

```{r}

spot <- tibble(`Cube value` = c(1, 2, 1, 1, 2, 1),
               `Taker needs` = c(8, 3, 8, 4, 16, 4),
               `Doubler needs` = c(3, 8, 3, 16, 4, 16),
               `TP-type` = rep(c("Cubeless", "Cubeless", "Live"), 2),
               `GNU says` = c("25.810%", "32.609%", "17.394%", "22.868%", "7.096% (Fully live)", "21.245%")
               ) %>% 
  rowwise() %>% 
  mutate(`My calculated TP` = 100 * if_else(`TP-type` == "Live", 
                                      tp_gammons(`Taker needs`, `Doubler needs`, 0, 0, 0, 0, `Cube value`, kaz) * 
                                        (1 - tp_gammons(`Doubler needs`, `Taker needs`, 0, 0, 0, 0, 2 * `Cube value`, kaz)),
                                      tp_gammons(`Taker needs`, `Doubler needs`, 0, 0, 0, 0, `Cube value`, kaz)))

spot
```
They all match exactly.

Trying another example with one player trailing (-5,-3) and both having a gammon frequency of 0.1, i.e. 10 percent of wins will be gammons:


```{r}

spot2 <- tibble(
  `Cube value` = c(1, 2, 1),
  `Taker needs` = c(5, 3, 5),
  `Doubler needs` = c(3, 5, 3),
  `Taker's gammon freq` = c(0.1, 0.1, 0.1),
  `Doubler's gammon freq` = c(0.1, 0.1, 0.1),
  `TP-type` = c("Cubeless", "Cubeless", "Live"),
  `GNU says` = c("29.795%", "35.541%", "20.552%")
) %>%
  rowwise() %>%
  mutate(`My calculated TP` = 100 * if_else(
    `TP-type` == "Live",
    tp_gammons(`Taker needs`, `Doubler needs`, `Taker's gammon freq`, 0, `Doubler's gammon freq`, 0, `Cube value`, kaz) *
      (1 - tp_gammons(`Doubler needs`, `Taker needs`, `Doubler's gammon freq`, 0, `Taker's gammon freq`, 0, 2 * `Cube value`, kaz)
      ),
    tp_gammons(`Taker needs`, `Doubler needs`, `Taker's gammon freq`, 0, `Doubler's gammon freq`, 0, `Cube value`, kaz)
  )) %>% 
  ungroup()

spot2
```

We agree on the cubeless take points, but not on the live one, *when gammons are in play*. Why, oh, why is this?


